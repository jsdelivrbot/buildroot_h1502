From badba9ca1ec5f26537592703e92349a3a76ee15f Mon Sep 17 00:00:00 2001
From: PA4WD <mscheepers@gmail.com>
Date: Mon, 27 Mar 2017 14:16:47 +0200
Subject: [PATCH] ST7565 driver for fbtft

---
 drivers/staging/fbtft/Kconfig        |   4 +
 drivers/staging/fbtft/Makefile       |   1 +
 drivers/staging/fbtft/fb_st7565.c    | 231 +++++++++++++++++++++++++++++++++++
 drivers/staging/fbtft/fbtft_device.c |  18 +++
 4 files changed, 254 insertions(+)
 create mode 100644 drivers/staging/fbtft/fb_st7565.c

diff --git a/drivers/staging/fbtft/Kconfig b/drivers/staging/fbtft/Kconfig
index 883ff5b..d2686ee 100644
--- a/drivers/staging/fbtft/Kconfig
+++ b/drivers/staging/fbtft/Kconfig
@@ -135,6 +135,10 @@ config FB_TFT_SSD1351
 	help
 	  Framebuffer support for SSD1351
 
+config FB_ST7565
+	tristate "FB driver for the ST7565R LCD Controller"
+	depends on FB_TF
+
 config FB_TFT_ST7735R
 	tristate "FB driver for the ST7735R LCD Controller"
 	depends on FB_TFT
diff --git a/drivers/staging/fbtft/Makefile b/drivers/staging/fbtft/Makefile
index 4f9071d..38b19b6 100644
--- a/drivers/staging/fbtft/Makefile
+++ b/drivers/staging/fbtft/Makefile
@@ -24,6 +24,7 @@ obj-$(CONFIG_FB_TFT_SSD1289)     += fb_ssd1289.o
 obj-$(CONFIG_FB_TFT_SSD1306)     += fb_ssd1306.o
 obj-$(CONFIG_FB_TFT_SSD1331)     += fb_ssd1331.o
 obj-$(CONFIG_FB_TFT_SSD1351)     += fb_ssd1351.o
+obj-$(CONFIG_FB_ST7565)          += fb_st7565.o
 obj-$(CONFIG_FB_TFT_ST7735R)     += fb_st7735r.o
 obj-$(CONFIG_FB_TFT_ST7789V)     += fb_st7789v.o
 obj-$(CONFIG_FB_TFT_TINYLCD)     += fb_tinylcd.o
diff --git a/drivers/staging/fbtft/fb_st7565.c b/drivers/staging/fbtft/fb_st7565.c
new file mode 100644
index 0000000..7d780c2
--- /dev/null
+++ b/drivers/staging/fbtft/fb_st7565.c
@@ -0,0 +1,231 @@
+/*
+ * FB driver for the ST 7565 LCD
+ *
+ * Copyright (C) 2013 Karol Poczesny
+ *
+ * This driver based on fbtft drivers solution created by Noralf Tronnes
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/gpio.h>
+#include <linux/delay.h>
+
+#include "fbtft.h"
+
+#define DRVNAME		"fb_st7565"
+#define WIDTH		132
+#define HEIGHT		64
+#define TXBUFLEN   1024 //128 x 8
+#define DEFAULT_GAMMA	"10"
+
+#define CMD_DISPLAY_OFF 0xAE
+#define CMD_DISPLAY_ON 0xAF
+
+#define CMD_SET_DISP_START_LINE 0x40
+#define CMD_SET_PAGE 0xB0
+
+#define CMD_SET_COLUMN_UPPER 0x10
+#define CMD_SET_COLUMN_LOWER 0x00
+
+#define CMD_SET_ADC_NORMAL 0xA0
+#define CMD_SET_ADC_REVERSE 0xA1
+
+#define CMD_SET_DISP_NORMAL 0xA6
+#define CMD_SET_DISP_REVERSE 0xA7
+
+#define CMD_SET_ALLPTS_NORMAL 0xA4
+#define CMD_SET_ALLPTS_ON 0xA5
+#define CMD_SET_BIAS_9 0xA2
+#define CMD_SET_BIAS_7 0xA3
+
+#define CMD_RMW 0xE0
+#define CMD_RMW_CLEAR 0xEE
+#define CMD_INTERNAL_RESET 0xE2
+#define CMD_SET_COM_NORMAL 0xC0
+#define CMD_SET_COM_REVERSE 0xC8
+#define CMD_SET_POWER_CONTROL 0x28
+#define CMD_SET_RESISTOR_RATIO 0x20
+#define CMD_SET_VOLUME_FIRST 0x81
+#define CMD_SET_VOLUME_SECOND 0
+#define CMD_SET_STATIC_OFF 0xAC
+#define CMD_SET_STATIC_ON 0xAD
+#define CMD_SET_STATIC_REG 0x0
+#define CMD_SET_BOOSTER_FIRST 0xF8
+#define CMD_SET_BOOSTER_234 0
+#define CMD_SET_BOOSTER_5 1
+#define CMD_SET_BOOSTER_6 3
+#define CMD_NOP 0xE3
+#define CMD_TEST 0xF0
+
+void write_data_command(struct fbtft_par *par, unsigned dc, u32 val)
+{
+	int ret;
+
+	if (par->gpio.dc != -1)
+		gpio_set_value(par->gpio.dc, dc);
+
+	*par->buf = (u8)val;
+
+	ret = par->fbtftops.write(par, par->buf, 1);
+}
+
+
+static int init_display(struct fbtft_par *par)
+{
+	fbtft_par_dbg(DEBUG_INIT_DISPLAY, par, "%s()\n", __func__);
+
+	par->fbtftops.reset(par);
+
+	mdelay(550);
+
+	gpio_set_value(par->gpio.dc, 0);
+	  // LCD bias select
+	write_reg(par,CMD_SET_BIAS_7);
+	  // ADC select
+	write_reg(par,CMD_SET_ADC_NORMAL);
+	  // SHL select
+	write_reg(par,CMD_SET_COM_NORMAL);
+	  // Initial display line
+	write_reg(par,CMD_SET_DISP_START_LINE);
+
+	  // turn on voltage converter (VC=1, VR=0, VF=0)
+	write_reg(par,CMD_SET_POWER_CONTROL | 0x4);
+	  // wait for 50% rising
+	mdelay(5);
+
+	  // turn on voltage regulator (VC=1, VR=1, VF=0)
+	write_reg(par,CMD_SET_POWER_CONTROL | 0x6);
+	  // wait >=50ms
+	mdelay(5);
+	  // turn on voltage follower (VC=1, VR=1, VF=1)
+	write_reg(par,CMD_SET_POWER_CONTROL | 0x7);
+	  // wait
+	mdelay(10);
+
+	  // set lcd operating voltage (regulator resistor, ref voltage resistor)
+	write_reg(par,CMD_SET_RESISTOR_RATIO | 0x6);
+
+	write_reg(par,CMD_DISPLAY_ON);
+	write_reg(par,CMD_SET_ALLPTS_NORMAL);
+	mdelay(30);
+
+	write_reg(par,CMD_SET_VOLUME_FIRST);
+	write_reg(par,CMD_SET_VOLUME_SECOND | (0x03 & 0x3f));
+
+	//clear screen
+	char p,c;
+	for(p = 0; p < 8; p++) {
+		write_data_command(par,0,CMD_SET_PAGE | p);
+
+	    for(c = 0; c < 132; c++) {
+	    	write_data_command(par,0, CMD_SET_COLUMN_LOWER | (c & 0xf));
+	    	write_data_command(par,0, CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
+	    	write_data_command(par,1, 0x00);
+	    }
+	  }
+
+	return 0;
+}
+
+static void set_addr_win(struct fbtft_par *par, int xs, int ys, int xe, int ye)
+{
+	fbtft_par_dbg(DEBUG_SET_ADDR_WIN, par,
+		"%s(xs=%d, ys=%d, xe=%d, ye=%d)\n", __func__, xs, ys, xe, ye);
+
+	// TODO : implement set_addr_win
+
+}
+
+static int set_var(struct fbtft_par *par)
+{
+	fbtft_par_dbg(DEBUG_INIT_DISPLAY, par, "%s()\n", __func__);
+
+	// TODO : implement additional functions like rotate settings
+
+	return 0;
+}
+
+static int write_vmem(struct fbtft_par *par, size_t offset, size_t len)
+{
+	u16 *vmem16 = (u16 *)par->info->screen_base;
+	u8 *buf = par->txbuf.buf;
+	u8 *p_buf = par->txbuf.buf;
+	int x, y, i;
+	int ret = 0;
+	char p, c;
+
+	fbtft_par_dbg(DEBUG_WRITE_VMEM, par, "%s()\n", __func__);
+
+	for (y=0;y<8;y++) {
+	for (x=0;x<132;x++) {
+			*buf = 0x00;
+			for (i=0;i<8;i++) {
+				*buf |= (vmem16[(y*8+i)*132+x] ? 1 : 0) << i;
+			}
+			buf++;
+		}
+	}
+
+	for(p = 0; p < 8; p++) {
+		write_data_command(par,0 ,CMD_SET_PAGE | p);
+		write_data_command(par,0 ,CMD_SET_COLUMN_LOWER | ((1) & 0xf));
+		write_data_command(par,0 ,CMD_SET_COLUMN_UPPER | (((1) >> 4) & 0x0F));
+		write_data_command(par,0 ,CMD_RMW);
+	    for(c = 0; c < 132; c++) {
+			write_data_command(par,1, *p_buf);
+	    	p_buf++;
+	    }
+	  }
+
+	return ret;
+}
+
+static int set_gamma(struct fbtft_par *par, unsigned long *curves)
+{
+	fbtft_par_dbg(DEBUG_INIT_DISPLAY, par, "%s()\n", __func__);
+	// TODO : gamma can be used to control contrast
+	return 0;
+}
+
+static struct fbtft_display display = {
+	.regwidth = 8,
+	.width = WIDTH,
+	.height = HEIGHT,
+	.txbuflen = TXBUFLEN,
+	.gamma_num = 1,
+	.gamma_len = 1,
+	.gamma = DEFAULT_GAMMA,   // TODO : gamma can be used to control contrast
+	.fbtftops = {
+		.init_display = init_display,
+		.set_addr_win = set_addr_win,
+		.set_var = set_var,
+		.write_vmem = write_vmem,
+		.set_gamma = set_gamma,
+	},
+	.backlight = 1,
+};
+
+FBTFT_REGISTER_DRIVER(DRVNAME, &display);
+
+MODULE_ALIAS("spi:" DRVNAME);
+
+MODULE_DESCRIPTION("FB driver for the ST7565 LCD Controller");
+MODULE_AUTHOR("Karol Poczesny");
+MODULE_LICENSE("GPL");
+
diff --git a/drivers/staging/fbtft/fbtft_device.c b/drivers/staging/fbtft/fbtft_device.c
index 071f79b..0177030 100644
--- a/drivers/staging/fbtft/fbtft_device.c
+++ b/drivers/staging/fbtft/fbtft_device.c
@@ -1023,6 +1023,24 @@ static struct fbtft_device_display displays[] = {
 			}
 		}
 	}, {
+    		.name = "st7565rfb",
+    		.spi = &(struct spi_board_info) {
+			.modalias = "fb_st7565",
+			.max_speed_hz = 16000000,
+			.mode = SPI_MODE_0,
+			.platform_data = &(struct fbtft_platform_data) {
+					.display = {
+					.buswidth = 8,
+					},
+			.gpios = (const struct fbtft_gpio []) {
+        				{ "reset", 25 },
+        				{ "dc", 24 },
+        				{ "led", 23 },
+                            {},
+                    },
+              }
+	}
+	}, {
 		.name = "spidev",
 		.spi = &(struct spi_board_info) {
 			.modalias = "spidev",

From e9e7368ab67ad565dec632aa5137e4a375939143 Mon Sep 17 00:00:00 2001
From: PA4WD <mscheepers@gmail.com>
Date: Mon, 27 Mar 2017 14:25:39 +0200
Subject: [PATCH] Kconfig error

---
 drivers/staging/fbtft/Kconfig | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/staging/fbtft/Kconfig b/drivers/staging/fbtft/Kconfig
index d2686ee..6648abf 100644
--- a/drivers/staging/fbtft/Kconfig
+++ b/drivers/staging/fbtft/Kconfig
@@ -137,7 +137,7 @@ config FB_TFT_SSD1351
 
 config FB_ST7565
 	tristate "FB driver for the ST7565R LCD Controller"
-	depends on FB_TF
+	depends on FB_TFT
 
 config FB_TFT_ST7735R
 	tristate "FB driver for the ST7735R LCD Controller"

From 1122f76442b78d131c59209ff5ed00157691c09c Mon Sep 17 00:00:00 2001
From: PA4WD <mscheepers@gmail.com>
Date: Mon, 27 Mar 2017 14:48:50 +0200
Subject: [PATCH] fixes in st7565 driver

---
 drivers/staging/fbtft/fb_st7565.c | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/drivers/staging/fbtft/fb_st7565.c b/drivers/staging/fbtft/fb_st7565.c
index 7d780c2..0b4b041 100644
--- a/drivers/staging/fbtft/fb_st7565.c
+++ b/drivers/staging/fbtft/fb_st7565.c
@@ -88,6 +88,8 @@ void write_data_command(struct fbtft_par *par, unsigned dc, u32 val)
 
 static int init_display(struct fbtft_par *par)
 {
+	char p,c;
+
 	fbtft_par_dbg(DEBUG_INIT_DISPLAY, par, "%s()\n", __func__);
 
 	par->fbtftops.reset(par);
@@ -129,7 +131,6 @@ static int init_display(struct fbtft_par *par)
 	write_reg(par,CMD_SET_VOLUME_SECOND | (0x03 & 0x3f));
 
 	//clear screen
-	char p,c;
 	for(p = 0; p < 8; p++) {
 		write_data_command(par,0,CMD_SET_PAGE | p);
 
@@ -221,9 +222,12 @@ static struct fbtft_display display = {
 	.backlight = 1,
 };
 
-FBTFT_REGISTER_DRIVER(DRVNAME, &display);
+FBTFT_REGISTER_DRIVER(DRVNAME, "sitronix,st7565", &display);
 
 MODULE_ALIAS("spi:" DRVNAME);
+MODULE_ALIAS("platform:" DRVNAME);
+MODULE_ALIAS("spi:st7565");
+MODULE_ALIAS("platform:st7565")
 
 MODULE_DESCRIPTION("FB driver for the ST7565 LCD Controller");
 MODULE_AUTHOR("Karol Poczesny");

From fca9ee74f3fe45f11f7d1f72ace39367d81121b2 Mon Sep 17 00:00:00 2001
From: PA4WD <mscheepers@gmail.com>
Date: Mon, 27 Mar 2017 15:15:56 +0200
Subject: [PATCH] added ;

---
 drivers/staging/fbtft/fb_st7565.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/staging/fbtft/fb_st7565.c b/drivers/staging/fbtft/fb_st7565.c
index 0b4b041..9f9cb95 100644
--- a/drivers/staging/fbtft/fb_st7565.c
+++ b/drivers/staging/fbtft/fb_st7565.c
@@ -227,7 +227,7 @@ FBTFT_REGISTER_DRIVER(DRVNAME, "sitronix,st7565", &display);
 MODULE_ALIAS("spi:" DRVNAME);
 MODULE_ALIAS("platform:" DRVNAME);
 MODULE_ALIAS("spi:st7565");
-MODULE_ALIAS("platform:st7565")
+MODULE_ALIAS("platform:st7565");
 
 MODULE_DESCRIPTION("FB driver for the ST7565 LCD Controller");
 MODULE_AUTHOR("Karol Poczesny");

From 9eba765121c437400ff24aa5d06fda9e36a9997d Mon Sep 17 00:00:00 2001
From: PA4WD <mscheepers@gmail.com>
Date: Tue, 28 Mar 2017 08:27:49 +0200
Subject: [PATCH] init for st7565

---
 drivers/staging/fbtft/fb_st7565.c | 50 +++++++++++++++++++++++++--------------
 1 file changed, 32 insertions(+), 18 deletions(-)

diff --git a/drivers/staging/fbtft/fb_st7565.c b/drivers/staging/fbtft/fb_st7565.c
index 9f9cb95..da5a2b5c 100644
--- a/drivers/staging/fbtft/fb_st7565.c
+++ b/drivers/staging/fbtft/fb_st7565.c
@@ -97,38 +97,52 @@ static int init_display(struct fbtft_par *par)
 	mdelay(550);
 
 	gpio_set_value(par->gpio.dc, 0);
+	
+
 	  // LCD bias select
-	write_reg(par,CMD_SET_BIAS_7);
+	//write_reg(par,CMD_SET_BIAS_9); //0xA2
 	  // ADC select
-	write_reg(par,CMD_SET_ADC_NORMAL);
+	//write_reg(par,CMD_SET_ADC_NORMAL);  // 0xA0
 	  // SHL select
-	write_reg(par,CMD_SET_COM_NORMAL);
+	//write_reg(par,CMD_SET_COM_NORMAL); //0xC0
 	  // Initial display line
-	write_reg(par,CMD_SET_DISP_START_LINE);
+	//write_reg(par,CMD_SET_DISP_START_LINE); //0x40
 
 	  // turn on voltage converter (VC=1, VR=0, VF=0)
-	write_reg(par,CMD_SET_POWER_CONTROL | 0x4);
+	//write_reg(par,CMD_SET_POWER_CONTROL | 0x4);
 	  // wait for 50% rising
-	mdelay(5);
+	//mdelay(5);
 
 	  // turn on voltage regulator (VC=1, VR=1, VF=0)
-	write_reg(par,CMD_SET_POWER_CONTROL | 0x6);
+	//write_reg(par,CMD_SET_POWER_CONTROL | 0x6);
 	  // wait >=50ms
-	mdelay(5);
+	//mdelay(5);
 	  // turn on voltage follower (VC=1, VR=1, VF=1)
-	write_reg(par,CMD_SET_POWER_CONTROL | 0x7);
+	//write_reg(par,CMD_SET_POWER_CONTROL | 0x7);
 	  // wait
-	mdelay(10);
+	//mdelay(10);
 
 	  // set lcd operating voltage (regulator resistor, ref voltage resistor)
-	write_reg(par,CMD_SET_RESISTOR_RATIO | 0x6);
-
-	write_reg(par,CMD_DISPLAY_ON);
-	write_reg(par,CMD_SET_ALLPTS_NORMAL);
-	mdelay(30);
-
-	write_reg(par,CMD_SET_VOLUME_FIRST);
-	write_reg(par,CMD_SET_VOLUME_SECOND | (0x03 & 0x3f));
+	//write_reg(par,CMD_SET_RESISTOR_RATIO | 0x6);
+
+	//write_reg(par,CMD_DISPLAY_ON); //0xAF
+	//write_reg(par,CMD_SET_ALLPTS_NORMAL);
+	//mdelay(30);
+
+	//write_reg(par,CMD_SET_VOLUME_FIRST); //0x81
+	//write_reg(par,CMD_SET_VOLUME_SECOND | (0x03 & 0x3f));
+
+	write_reg(par,0xE2);
+	write_reg(par,0xA2);
+	write_reg(par,0xA0);
+	write_reg(par,0xC8);
+	write_reg(par,0x40);
+	write_reg(par,0x2F);
+	write_reg(par,0x20);
+	write_reg(par,0xA6);
+	write_reg(par,0xAF);
+	write_reg(par,0x81);
+	write_reg(par,0x33);
 
 	//clear screen
 	for(p = 0; p < 8; p++) {

